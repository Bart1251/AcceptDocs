@page "/positionLevel/update/{id:int}"
@inject IPositionLevelService _positionLevelService
@inject NavigationManager _navigationManager

<PageTitle>Edytuj poziom stanowiska</PageTitle>

<div class="d-flex flex-column gap-3 mx-3">
    <div class="d-flex gap-3">
        <h3>Edycja poziomu stanowiska</h3>
        <RadzenButton Text="Wróć" ButtonType="ButtonType.Button" Click="@(() => _navigationManager.NavigateTo("positionLevel"))" />
    </div>

    <RadzenCard>
        <EditForm Model="@_positionLevel" OnValidSubmit="@SubmitPositionLevel">
            <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
            <ValidationSummary />

            <RadzenStack Gap="1rem">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeSM="6">
                        <RadzenFormField Text="Nazwa">
                            <RadzenTextBox @bind-Value="@_positionLevel.Name" Name="Name" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Zatwierdź" ButtonType="ButtonType.Submit" />
                </RadzenStack>
            </RadzenStack>
        </EditForm>
    </RadzenCard>
</div>



@code {
    [Parameter]
    public int Id { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;
    private PositionLevelDto _positionLevel = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _positionLevel = _positionLevelService.Get(Id);
    }

    private void SubmitPositionLevel()
    {
        _positionLevelService.Update(_positionLevel);
        _navigationManager.NavigateTo("positionLevel");
    }
}
