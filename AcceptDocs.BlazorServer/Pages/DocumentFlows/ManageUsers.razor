@page "/flow/users/{id:int}"
@inject DialogService _dialogService
@inject IDocumentFlowService _documentFlowService
@inject NotificationService _notificationService
@inject IUserService _userService

<PageTitle>Przypisane osoby</PageTitle>

<RadzenStack Gap="1rem" class="mx-3 mb-3">
    <RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.H5">Zarządzaj przypisanymi do przepływu: @_flowName</RadzenText>
        <NavigationButton />
    </RadzenStack>
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12">
            <RadzenText TextStyle="TextStyle.H6">Dodani do przepływu:</RadzenText>
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@_attachedUsers" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                <Columns>
                    <RadzenDataGridColumn Property="UserId" Title="Id" Width="100px" />
                    <RadzenDataGridColumn Property="FirstName" Title="Imię" />
                    <RadzenDataGridColumn Property="LastName" Title="Nazwisko" />
                    <RadzenDataGridColumn Title="Stanowisko">
                        <Template Context="user">
                            @(user.PositionLevel + " " + user.Position)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Kryterium wartości" >
                        <Template Context="user">
                            @string.Format("{0:N2} zł", user.Value)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Akcje" Width="100px" Sortable="false" Filterable="false">
                        <Template Context="user">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="5px">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="@(() => Edit(user.UserId))" />
                                <RadzenButton Icon="arrow_downward" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="@(() => DetachUser(user.UserId))" />
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenText TextStyle="TextStyle.H6">Dostępni by dołączyć:</RadzenText>
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@_users" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                <Columns>
                    <RadzenDataGridColumn Property="UserId" Title="Id" Width="100px" />
                    <RadzenDataGridColumn Property="FirstName" Title="Imię" />
                    <RadzenDataGridColumn Property="LastName" Title="Nazwisko" />
                    <RadzenDataGridColumn Property="Position" Title="Stanowisko">
                        <Template Context="user">
                            @(user.PositionLevel.Name + " " + user.Position)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Akcje" Width="80px" Sortable="false" Filterable="false">
                        <Template Context="user">
                            <RadzenButton Icon="arrow_upward" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Click="@(() => AttachUser(user.UserId))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
    
</RadzenStack>

@code {
    [Parameter]
    public int Id { get; set; }

    private string _flowName = "";
    private List<DocumentFlowUserDto> _attachedUsers = new();
    private List<UserDto> _users = new();
    private AttachUserDto _attachmentModel = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _attachmentModel = new();
        _flowName = _documentFlowService.Get(Id).Name;
        _attachedUsers = _documentFlowService.GetAttachedUsers(Id);
        _users = _documentFlowService.GetNotAttachedUsers(Id);
    }

    private async Task AttachUser(int userId)
    {
        var result = await _dialogService.OpenAsync<ValueForm>(
            "Dodaj kryterium wartości dla dodawanego użytkownika",
            new Dictionary<string, object>() {
                { "AttachmentModel", _attachmentModel }
            },
            new DialogOptions() { Width = "500px", Height = "auto", Resizable = true }
        );

        if(result is AttachUserDto att) {
            att.UserId = userId;
            att.DocumentFlowId = Id;
            _documentFlowService.AttachUser(att);
            _notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Sukces",
                Detail = "Pomyślnie dołączono użytkownika do przepływu",
                Duration = 4000
            });
            OnInitialized();
        }
    }

    private async Task DetachUser(int userId)
    {
        if(_userService.CanDeleteUser(userId)) {
            bool? confirmed = await _dialogService.Confirm(
                "Czy na pewno chcesz odłączyć użytkownika z przepływu?",
                "Potwierdzenie",
                new ConfirmOptions()
                {
                    OkButtonText = "Tak",
                    CancelButtonText = "Nie",
                }
            );

            if(confirmed == true) {
                _documentFlowService.DetachUser(Id, userId);
                _notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Sukces",
                    Detail = "Pomyślnie odłączono użytkownika od przepływu",
                    Duration = 4000
                });
                OnInitialized();
            }
        } else {
            _notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Nie można odłączyć użytkownika",
                Detail = "Użytkownik posiada aktywne prośby o akceptację dokumentu.",
                Duration = 4000
            });
        }
    }

    private async Task Edit(int userId)
    {
        var result = await _dialogService.OpenAsync<ValueForm>(
            "Zmień kryterium wartości dla użytkownika",
            new Dictionary<string, object>() {
                { "AttachmentModel", _attachmentModel }
            },
            new DialogOptions() { Width = "500px", Height = "auto", Resizable = true }
        );

        if(result is AttachUserDto att) {
            att.UserId = userId;
            att.DocumentFlowId = Id;
            _documentFlowService.UpdateAttachedUserValue(att);
            _notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Sukces",
                Detail = "Pomyślnie zedytowno kryterium wartości",
                Duration = 4000
            });
            OnInitialized();
        }
    }
}
