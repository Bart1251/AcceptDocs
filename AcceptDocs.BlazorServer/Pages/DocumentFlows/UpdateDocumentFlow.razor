@page "/flow/update/{id:int}"
@inject IDocumentFlowService _documentFlowService
@inject NavigationHelper _navigationHelper
@inject NotificationService _notificationService

<PageTitle>Edytuj przepływ dokumentów</PageTitle>

<RadzenStack Gap="1rem" class="mx-3 mb-3">
    <RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.H5">Edycja przepływu dokumentów</RadzenText>
        <NavigationButton />
    </RadzenStack>

    <RadzenCard>
        <EditForm Model="@_flow" OnValidSubmit="@SubmitFlow">
            <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
            <ValidationSummary />

            <RadzenStack Gap="1rem">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeSM="6">
                        <RadzenStack>
                            <RadzenFormField Text="Nazwa">
                                <RadzenTextBox @bind-Value="@_flow.Name" Name="Name" />
                            </RadzenFormField>
                            <RadzenFormField Text="Metoda selekcji">
                                <RadzenDropDown @bind-Value="@_flow.SelectionMethod" Placeholder="Wybierz metodę selekcji" Data="@_selectionMethods" TextProperty="Name" ValueProperty="Value" Name="SelectionMethod" />
                            </RadzenFormField>
                            <RadzenFormField Text="Opis">
                                <RadzenTextArea @bind-Value="@_flow.Description" Name="Description" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Zatwierdź" ButtonType="ButtonType.Submit" />
                </RadzenStack>
            </RadzenStack>
        </EditForm>
    </RadzenCard>
</RadzenStack>



@code {
    [Parameter]
    public int Id { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;
    private UpdateDocumentFlowDto _flow = new();
    private List<EnumItem<SelectionMethodDto>> _selectionMethods = EnumHelper.GetEnumList<SelectionMethodDto>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var flow = _documentFlowService.Get(Id);
        _flow = new UpdateDocumentFlowDto()
            {
                DocumentFlowId = flow.DocumentFlowId,
                Name = flow.Name,
                Description = flow.Description,
                SelectionMethod = flow.SelectionMethod,
            };
    }

    private async Task SubmitFlow()
    {
        _documentFlowService.Update(_flow);
        _notificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Sukces",
            Detail = "Pomyślnie zedytowano przepływ",
            Duration = 4000
        });
        await _navigationHelper.GoBackAsync();
    }
}
